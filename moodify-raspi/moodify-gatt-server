#!/usr/bin/python3

import dbus

from pyble.advertisement import Advertisement
from pyble.service import Application, Service, Characteristic, Descriptor

from gpioprogramming.LEDControl import LEDControl, decodeString

GATT_CHRC_IFACE = "org.bluez.GattCharacteristic1"
NOTIFY_TIMEOUT = 1000
PI_CONTROL = LEDControl()


class MoodifyAdvertisement(Advertisement):
    def __init__(self, index):
        Advertisement.__init__(self, index, "peripheral")
        self.add_local_name("Moodify")
        self.add_service_uuid("8af3d338-4048-428f-9bc1-a206d183ac38")
        self.include_tx_power = True


class ManualLightMode(Service):
    MAN_LIGHT_SVC_UUID = "953f08c4-8c8f-46f4-a48b-07c18dfb3447"

    def __init__(self, index):
        Service.__init__(self, index, self.MAN_LIGHT_SVC_UUID, True)
        self.add_characteristic(ToggleModeCharacteristic(self))


class ToggleModeCharacteristic(Characteristic):
    TOGGLE_MODE_CHARACTERISTIC_UUID = "58590b45-241a-4230-b020-700ac827a8fb"

    def __init__(self, service):
        self.notifying = True
        self._value = '000'

        Characteristic.__init__(
            self, self.TOGGLE_MODE_CHARACTERISTIC_UUID,
            ["notify", "read", "write"], service)
        self.add_descriptor(ToggleModeCharacteristicDescriptor(self))

    def get_value(self):
        return dbus.ByteArray(self._value.encode())

    def notify(self):
        self.PropertiesChanged(GATT_CHRC_IFACE, {"Value": self.get_value()}, [])
        print('notified')

    def StartNotify(self):
        print('StartNotify')
        if self.notifying:
            return

        self.notifying = True

        self.notify()

    def WriteValue(self, value, options):
        print('WriteValue')
        self._value = ''.join([str(v) for v in value])
        print(self._value)
        PI_CONTROL.update(self._value)
        print('New value:', self._value)
        if self.notifying:
            self.notify()

    def StopNotify(self):
        print('StopNotify')
        self.notifying = False

    def ReadValue(self, options):
        print('ReadValue')
        value = self.get_value()
        print('value to return:', value)
        return value


class ToggleModeCharacteristicDescriptor(Descriptor):
    TOGGLE_MODE_CHAR_UUID = "57a1524f-aab4-4162-911a-17d368696b15"
    TOGGLE_MODE_DESCRIPTOR_VALUE = "This is used to set Mode"

    def __init__(self, characteristic):
        Descriptor.__init__(
            self, self.TOGGLE_MODE_CHAR_UUID,
            ["read"],
            characteristic)

    def ReadValue(self, options):
        value = []
        desc = self.TOGGLE_MODE_DESCRIPTOR_VALUE

        for c in desc:
            value.append(dbus.Byte(c.encode()))

        return value


if __name__ == '__main__':
    app = Application()
    app.add_service(ManualLightMode(0))
    app.register()

    adv = MoodifyAdvertisement(0)
    adv.register()

    try:
        app.run()
    except KeyboardInterrupt:
        PI_CONTROL.terminate()
        app.quit()
