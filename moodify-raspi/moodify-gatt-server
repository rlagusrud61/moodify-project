#!/usr/bin/python3

import dbus

from pyble.advertisement import Advertisement
from pyble.service import Application, Service, Characteristic, Descriptor

from gpioprogramming.MoodifyDriver import MoodifyLogic, terminate

GATT_CHRC_IFACE = "org.bluez.GattCharacteristic1"
NOTIFY_TIMEOUT = 1000
PI_CONTROL = MoodifyLogic()


class MoodifyAdvertisement(Advertisement):

    def __init__(self, index):
        """
        Initialises the Advertisement
        :param index: The Index of the Advertisement when displayed by the BLE device.
        """
        Advertisement.__init__(self, index, "peripheral")
        self.add_local_name("Moodify")
        self.add_service_uuid("953f08c4-8c8f-46f4-a48b-07c18dfb3447")
        self.include_tx_power = True


class MoodifyControlService(Service):
    M_CTRL_SVC_UUID = "953f08c4-8c8f-46f4-a48b-07c18dfb3447"

    def __init__(self, index):
        """
        The Moodify Control Service class which is the container of the services it provides.
        :param index: The index of the Service in the list of services when shown in the Client.
        """
        Service.__init__(self, index, self.M_CTRL_SVC_UUID, True)
        self.add_characteristic(ToggleModeCharacteristic(self))
        self.add_characteristic(ColourCharacteristic(self))
        self.add_characteristic(BrightnessCharacteristic(self))


class ToggleModeCharacteristic(Characteristic):
    TOGGLE_MODE_CHARACTERISTIC_UUID = "58590b45-241a-4230-b020-700ac827a8fb"

    def __init__(self, service):
        """
        The Toggle Mode Characteristic that controls the Moodify's current mode.
        :param service: The Service to which it belongs to.
        """
        self.notifying = False
        self._value = '000'

        Characteristic.__init__(
            self, self.TOGGLE_MODE_CHARACTERISTIC_UUID,
            ["notify", "read", "write"], service)
        self.add_descriptor(ToggleModeCharacteristicDescriptor(self))

    def get_value(self):
        """
        Returns the current value of the Characteristic.
        :return: Byte Array
        """
        return dbus.ByteArray(self._value.encode())

    def notify(self):
        """
        Sends an update back to the Client.
        :return: void
        """
        self.PropertiesChanged(GATT_CHRC_IFACE, {"Value": self.get_value()}, [])
        print('notified')

    def StartNotify(self):
        """
        Starts the notification process, if not already notifying.
        :return:
        """
        print('StartNotify')
        if self.notifying:
            return

        self.notifying = True

        self.notify()

    def WriteValue(self, value, options):
        """
        Updates the current value of the characteristic.
        :param value: The new Value to add
        :type Byte Array

        :param options:
        :return:
        """
        self._value = ''.join([str(v) for v in value])
        print('New value received for Toggle Mode Char:', self._value)
        PI_CONTROL.update_mode(self._value)
        if self.notifying:
            self.notify()

    def StopNotify(self):
        """
        Stops sending notifying to the device.
        :return:
        """
        self.notifying = False

    def ReadValue(self, options):
        """
        Sends the current value of the Toggle Mode Characteristic to the Client.
        :param options:
        :return:
        """
        value = self.get_value()
        print('Toggle Mode Value to return: ', value)
        return value


class ColourCharacteristic(Characteristic):
    COLOUR_CHARACTERISTIC_UUID = "2f59ede8-dd70-4748-94a3-3ca4f6663a42"

    def __init__(self, service):
        """
        The Toggle Mode Characteristic that controls the Moodify's current colour.
        The initial value is '0,0,0'

        :param service: The Service to which it belongs to.
        """
        self.notifying = False
        self._value = "0,0,0"

        Characteristic.__init__(
            self, self.COLOUR_CHARACTERISTIC_UUID,
            ["notify", "read", "write"], service)
        self.add_descriptor(ColourCharacteristicDescriptor(self))

    def get_value(self):
        """
        Returns the current value of the Characteristic.
        :return: Byte Array
        """
        return dbus.ByteArray(self._value.encode())

    def notify(self):
        """
        Sends an update back to the Client.
        :return: void
        """
        self.PropertiesChanged(GATT_CHRC_IFACE, {"Value": self.get_value()}, [])
        print('notified')

    def StartNotify(self):
        """
        Starts the notification process, if not already notifying.
        :return:
        """
        print('StartNotify')
        if self.notifying:
            return

        self.notifying = True

        self.notify()

    def WriteValue(self, value, options):
        """
        Updates the current value of the characteristic.
        :param value: The new Value to add
        :type Byte Array

        :param options:
        :return:
        """
        print('WriteValue')
        self._value = ''.join([str(v) for v in value])
        print(self._value)
        PI_CONTROL.update_colour(self._value)
        print('New value:', self._value)
        if self.notifying:
            self.notify()

    def StopNotify(self):
        """
        Stops sending notifying to the device.
        :return:
        """
        print('StopNotify')
        self.notifying = False

    def ReadValue(self, options):
        """
        Sends the current value of the Toggle Mode Characteristic to the Client.
        :param options:
        :return:
        """
        print('ReadValue')
        value = self.get_value()
        print('value to return:', value)
        return value


class BrightnessCharacteristic(Characteristic):
    BRIGHTNESS_CHARACTERISTIC_UUID = "c0cf5135-aae3-4a8e-ad4c-e33614753037"

    def __init__(self, service):
        """
        The Toggle Mode Characteristic that controls the Moodify's current brightness.
        :param service: The Service to which it belongs to.
        """
        self.notifying = False
        self._value = "0.2"

        Characteristic.__init__(
            self, self.BRIGHTNESS_CHARACTERISTIC_UUID,
            ["notify", "read", "write"], service)
        self.add_descriptor(BrightnessCharacteristicDescriptor(self))

    def get_value(self):
        """
        Returns the current value of the Characteristic.
        :return: Byte Array
        """
        return dbus.ByteArray(self._value.encode())

    def notify(self):
        """
        Sends an update back to the Client.
        :return: void
        """
        self.PropertiesChanged(GATT_CHRC_IFACE, {"Value": self.get_value()}, [])
        print('notified')

    def StartNotify(self):
        """
        Starts the notification process, if not already notifying.
        :return:
        """
        print('StartNotify')
        if self.notifying:
            return

        self.notifying = True

        self.notify()

    def WriteValue(self, value, options):
        """
        Updates the current value of the characteristic.
        :param value: The new Value to add
        :type Byte Array

        :param options:
        :return:
        """
        print('WriteValue')
        self._value = ''.join([str(v) for v in value])
        print(self._value)
        PI_CONTROL.update_brightness(self._value)
        print('New value:', self._value)
        if self.notifying:
            self.notify()

    def StopNotify(self):
        """
        Stops sending notifying to the device.
        :return:
        """
        print('StopNotify')
        self.notifying = False

    def ReadValue(self, options):
        """
        Sends the current value of the Toggle Mode Characteristic to the Client.
        :param options:
        :return:
        """
        print('ReadValue')
        value = self.get_value()
        print('value to return:', value)
        return value


class ToggleModeCharacteristicDescriptor(Descriptor):
    TOGGLE_MODE_CHAR_UUID = "57a1524f-aab4-4162-911a-17d368696b15"
    TOGGLE_MODE_DESCRIPTOR_VALUE = "This is used to set the Mode of the Moodify"

    def __init__(self, characteristic):
        Descriptor.__init__(
            self, self.TOGGLE_MODE_CHAR_UUID,
            ["read"],
            characteristic)

    def ReadValue(self, options):
        value = []
        desc = self.TOGGLE_MODE_DESCRIPTOR_VALUE

        for c in desc:
            value.append(dbus.Byte(c.encode()))

        return value


class ColourCharacteristicDescriptor(Descriptor):
    COLOUR_CHAR_UUID = "d7663fe0-1b13-4f3a-bdb4-cad3776c1624"
    COLOUR_DESCRIPTOR_VALUE = "This is used to set the colour in manual light/auto LDR mode"

    def __init__(self, characteristic):
        Descriptor.__init__(
            self, self.COLOUR_CHAR_UUID,
            ["read"],
            characteristic)

    def ReadValue(self, options):
        value = []
        desc = self.COLOUR_DESCRIPTOR_VALUE

        for c in desc:
            value.append(dbus.Byte(c.encode()))

        return value


class BrightnessCharacteristicDescriptor(Descriptor):
    BRIGHTNESS_CHAR_UUID = "ab8ffd08-70a0-4128-9d59-465b9159c33f"
    BRIGHTNESS_DESCRIPTOR_VALUE = "This is used to set the brightness in manual light/auto LDR mode"

    def __init__(self, characteristic):
        Descriptor.__init__(
            self, self.BRIGHTNESS_CHAR_UUID,
            ["read"],
            characteristic)

    def ReadValue(self, options):
        value = []
        desc = self.BRIGHTNESS_DESCRIPTOR_VALUE

        for c in desc:
            value.append(dbus.Byte(c.encode()))

        return value


if __name__ == '__main__':
    app = Application()
    app.add_service(MoodifyControlService(0))
    app.register()

    adv = MoodifyAdvertisement(0)
    adv.register()

    try:
        app.run()
    except KeyboardInterrupt:
        terminate()
        app.quit()
